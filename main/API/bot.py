# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command

from tool.model import ClassificationModel
from tool.config import TGTOKEN, MODEL_PATH
from tool.ymusic import YMusic
from tool.database import UserDB

# –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞
class TGBot():
    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
    def __init__(self, model_path: str = MODEL_PATH):
        self.bot = Bot(token=TGTOKEN)
        self.dp = Dispatcher()
        self.model = ClassificationModel(model_path)
        self.ymusic = YMusic()
        self._register_handlers()
        self.db = UserDB()
        self.user_id = None

    def _register_handlers(self):
        '''–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π'''
        self.dp.message(Command('start'))(self._start_handler)
        self.dp.message(F.photo)(self._photo_handler)

    async def _start_handler(self, message: types.Message):
        '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start'''
        info = (message.from_user.first_name, 
          message.from_user.last_name,
          message.from_user.id, 
          message.from_user.is_premium,
          message.from_user.username,
          message.from_user.is_bot,
          )
        
        self.user_id = message.from_user.id
        print(f'user ID: {self.user_id}')
        self.db.add_info(info)

        await message.answer('''–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å –º—É–∑—ã–∫–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
                             \n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–æ–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ –∑–¥–µ—Å—å üëâhttps://t.me/HlebAnonBot
                             \n–ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ª–∏—á–Ω–æ —Å—é–¥–∞ üëâhttps://t.me/marrainfue
                             ''')

    async def _photo_handler(self, message: types.Message):
        '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'''
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        self.user_id = message.from_user.id
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db.update_img_count(self.user_id)
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ 
            photo = message.photo[-1]   # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            file_id = photo.file_id
            file = await self.bot.get_file(file_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            os.makedirs('downloads', exist_ok=True)
            download_path = f'downloads/{message.from_user.username}_{self.db.get_img_count(self.user_id)}.jpg'

            await self.bot.download_file(file.file_path, download_path)

            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 
            top3, top3conf = self.model.classificate(download_path)
            # –°—á–∏—Ç–∞–µ–º —Ç—Ä–µ–∫–∏
            tracks_count = self.ymusic.tracks_counter(top3conf)

            tracklist = []
            for i in range(3):
                tracklist = tracklist + self.db.fetch_random_track(top3[i], tracks_count[i])
            playlist_link = self.ymusic.create_playlist(
                top3[0],
                tracklist=tracklist 
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.reply(
                f'–í–∞—à –ø–ª–µ–π–ª–∏—Å—Ç –≥–æ—Ç–æ–≤! \n{playlist_link}'
            )

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            print('-'*30)
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name} | {self.db.get_img_count(self.user_id)} —Ñ-–π')
            print(f'–ü—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {download_path}')
            print(f'–û—Å–Ω–æ–≤–Ω–æ–π –∂–∞–Ω—Ä: {top3[0]} | {top3conf[0]:.2f}')
            print(f'–î–æ–ø. –∂–∞–Ω—Ä—ã: {top3[1]}, {top3[2]} | {top3conf[1]:.2f}, {top3conf[2]:.2f}')
            print(f'–ü—É—Ç—å –∫ –∞–ª—å–±–æ–º—É: {playlist_link}')
            print('-'*30, '\n')

        except Exception as e:
            await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ -- {e}')

    async def run(self):
        '''–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'''
        await self.dp.start_polling(self.bot)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print(f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {os.getcwd()}')
    model_path = os.path.join(os.getcwd(), MODEL_PATH)
    print(f'–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏(–æ—Å–Ω): {model_path}')
    print(os.path.exists(model_path))
    bot = TGBot()
    asyncio.run(bot.run())